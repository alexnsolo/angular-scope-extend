{"name":"Angular scopeExtend","tagline":"Organize controller code using object notation.","body":"## Installation\r\n``` bower install angular-scope-extend --save```\r\n\r\nor download at [https://github.com/civilframe/angular-scope-extend/releases](https://github.com/civilframe/angular-scope-extend/releases)\r\n\r\n2 KB minified\r\n\r\n## Benefits\r\n\r\nOrganize your angular controller code in object notation, using 'this' to refer to $scope. Works best with CoffeeScript.\r\n\r\n### Before\r\n\r\nCoffeeScript:\r\n```coffeescript\r\nangular.module('my-module').controller 'MyCtrl', ($scope, myService) ->\r\n    \r\n    $scope.myVariable = 5\r\n    \r\n    $scope.myFunction = ->\r\n        myService.doStuff($scope.myVariable)\r\n        \r\n    $scope.myOtherFunction = ->\r\n        console.log('reticulating spleens')\r\n        \r\n    $scope.$watch 'myVariable', (newValue, oldValue) ->\r\n        $scope.myFunction()\r\n        \r\n    $scope.$on 'SOME_EVENT', (event) ->\r\n        $scope.myOtherFunction()\r\n        $scope.myVariable++\r\n    \r\n    # Initialization\r\n    $scope.myFunction()\r\n    console.log('Phew. Much $scope everywhere.')\r\n```\r\nJavaScript:\r\n```javascript\r\nangular.module('my-module').controller('MyCtrl', function($scope, myService) {\r\n\r\n    $scope.myVariable = 5;\r\n\r\n    $scope.myFunction = function() {\r\n        return myService.doStuff($scope.myVariable);\r\n    };\r\n\r\n    $scope.myOtherFunction = function() {\r\n        return console.log('reticulating spleens');\r\n    };\r\n\r\n    $scope.$watch('myVariable', function(newValue, oldValue) {\r\n        return $scope.myFunction();\r\n    });\r\n\r\n    $scope.$on('SOME_EVENT', function(event) {\r\n        $scope.myOtherFunction();\r\n        return $scope.myVariable++;\r\n    });\r\n\r\n    // Initialization\r\n    $scope.myFunction();\r\n    console.log('Phew. Much $scope everywhere.');\r\n});\r\n```\r\n\r\n### After\r\n\r\nCoffeeScript:\r\n```coffeescript\r\nangular.module('my-module').controller 'MyCtrl', ($scope, scopeExtend, myService) -> scopeExtend $scope,\r\n    \r\n    variables:\r\n        myVariable: 5\r\n\r\n    methods: \r\n        myFunction: ->\r\n            myService.doStuff(@myVariable)\r\n            \r\n        myOtherFunction: ->\r\n            console.log('reticulating spleens')\r\n        \r\n    watch:\r\n        'myVariable': (newValue, oldValue) ->\r\n            @myFunction()\r\n        \r\n    listen:\r\n        'SOME_EVENT': (event) ->\r\n            @myOtherFunction()\r\n            @myVariable++\r\n        \r\n    initialize: ->\r\n        @myFunction()\r\n        console.log('Ahh, much better!')\r\n```\r\nJavaScript:\r\n```javascript\r\nangular.module('my-module').controller('MyCtrl', function($scope, scopeExtend, myService) {\r\n    scopeExtend($scope, {\r\n\r\n        variables: {\r\n            myVariable: 5\r\n        },\r\n\r\n        methods: {\r\n            myFunction: function() {\r\n                myService.doStuff(this.myVariable);\r\n            },\r\n            myOtherFunction: function() {\r\n                console.log('reticulating spleens');\r\n            }\r\n        },\r\n\r\n        watch: {\r\n            'myVariable': function(newValue, oldValue) {\r\n                this.myFunction();\r\n            }\r\n        },\r\n\r\n        listen: {\r\n            'SOME_EVENT': function(event) {\r\n                this.myOtherFunction();\r\n                this.myVariable++;\r\n            }\r\n        },\r\n\r\n        initialize: function() {\r\n            this.myFunction();\r\n            console.log('Ahh, much better!');\r\n        }\r\n        \r\n    });\r\n});\r\n```\r\n\r\n## Advanced Usage\r\n```coffeescript\r\nangular.module('example-module').controller 'ExampleCtrl', ($scope, scopeExtend) -> scopeExtend $scope,\r\n    variables:\r\n        'test': 1\r\n        'test2': {value: 2}\r\n        'test3': [1,2,3]\r\n\r\n    methods:\r\n        'readTest': -> \r\n            console.log 'test is', @test\r\n\r\n        'readTest2': -> \r\n            console.log 'test2 is', @test2\r\n\r\n    listen:\r\n        # The name of the event corresponds to the key, in this case 'SOME_EVENT'\r\n        'SOME_EVENT': (event, coolArg) ->\r\n            console.log 'SOME_EVENT received', coolArg\r\n\r\n        'SOME_OTHER_EVENT': (event) -> \r\n            console.log 'SOME_OTHER_EVENT received'\r\n\r\n    watch:\r\n        # For simple watches, the watch expression corresponds to the key\r\n        'test': (newValue) -> \r\n            console.log 'test changed to', newValue\r\n\r\n        # For more complex watches, the key is arbitrary\r\n        'testDeep': \r\n            expression: 'test2' # and the expression is specified here\r\n            depth: 'deep' # as well as the watch depth\r\n            callback: (newValue) -> # and lastly the callback\r\n                console.log 'test2 deeply changed to', newValue\r\n\r\n        # You can also watch collections by specifying depth as 'collection'\r\n        'testCollection': \r\n            expression: 'test3'\r\n            depth: 'collection'\r\n            callback: (newValue) ->\r\n                console.log 'test3 collection changed to', newValue\r\n\r\n        # You can also watch groups by specifying an array of expressions for expressionGroup\r\n        'testGroup':\r\n            expressionGroup: ['test1', 'test2']\r\n            callback: (newValues) ->\r\n                console.log 'test1 and test2 changed to', newValues\r\n\r\n    initialize: ->\r\n        @test1 = 2\r\n        @test2.value = 5\r\n        @test3.push(4)\r\n\r\n        @$emit('SOME_EVENT')\r\n        @_forgetListen('SOME_EVENT') # The built-in _forgetListen function removes the listener for the specified key\r\n        @$emit('SOME_EVENT') # so this shouldn't be received\r\n\r\n        @_forgetWatch('testCollection') # You can also forget watches by specifying the key\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}